@mixin flex ($justify-content: null, $align-items: null, $flex-wrap:null, $flex-direction: null) {
	display: flex;
	justify-content: $justify-content;
	align-items: $align-items;
	flex-wrap: $flex-wrap;
	flex-direction: $flex-direction;
}

@mixin pseudo ($content: '') {
	content: $content;
	display: block;
}

@mixin pos ($position: null, $top: null, $bottom: null, $left: null, $right: null) {
	position: $position;
	top: $top;
	bottom: $bottom;
	left: $left;
	right: $right;
}


@mixin font ($font-size: null, $line-height: null, $font-weight: null, $text-align: null, $text-transform: null) {
	font-size: $font-size;
	line-height: $line-height;
	text-transform: $text-transform;
	font-weight: $font-weight;
	text-align: $text-align;
}

@mixin background ($img) {
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;
	background-image: $img;
}


@mixin border($border-width: null, $border-style: solid, $border-color: null) {
	border-width: $border-width;
	border-style: $border-style;
	border-color: $border-color;
}

@mixin colors($text, $background, $border) {
	color: $text;
	background-color: $background;
	border-color: $border;
}

@mixin wh ($width: $width, $height: $width) {
	width: $width;
	height: $height;
}

@mixin wh-px ($width: $width, $height: $width) {
	width: #{$width}px;
	height: #{$height}px;
}



@mixin adaptive-font($maxSizeFont, $minSizeFont, $maxWidth, $minWidth) {
	$sizeFont: $maxSizeFont - $minSizeFont;
	$maxWidth: $maxWidth - $minWidth;
	font-size: calc(#{$minSizeFont + px} + #{$sizeFont} * ((100vw - #{$minWidth + px}) / #{$maxWidth}));
}

/* -----------------------------------------------------------------
                       @media
1-ый параметр $min-max принимает 3 аргумента min, max, min-max.
   min       - для mobil @media
   max       - для dectop @media
   min-max   - для промежутка между mobil-dectop @media
2-ой параметр $breakpoint_1 принимает 1-ин аргумент.
   ключ      - хранятся в созданной карте $grid_breakpoints(xxl, xl, lg, md , sm...)
3-ий параметр $breakpoint_2 принимает 1-ин аргумент, является не обязательным параметром.
   ключ      - хранятся в созданной карте $grid_breakpoints(xxl, xl, lg, md , sm...) нужен для 1-ого параметра 3 аргумента.
 Дополнение:
   map-has-key  - Нужен для проверки ключа в карте, если ключа указанного нет то условие не выполняется.
   map-get      - Нужен для использование ключей из карты.
Пример:
   @include media(max, xxl) { display: none;}
   @include media(min, xxl) { display: none;}
   @include media(min-max, mn-lg, mx-xxl) { display: none;}
Одиночные брекпоинты:
   @include media(max, 870px,) { display: none;}
   @include media(min, 870px,) { display: none;}
   @include media(min-max, 870px, 1000px) { display: none;}
--------------------------------------------------------------------*/

@mixin media($min-max, $breakpoint_1, $breakpoint_2: none) {

	@if map-has-key($grid_breakpoints, $breakpoint_1) and $min-max=="max" {

		@media only screen and (#{$min-max}-width: #{map-get( $grid_breakpoints, $breakpoint_1)}) {
			@content;
		}

	}

	@else if map-has-key($grid_breakpoints, $breakpoint_1) and $min-max=='min' {

		@media only screen and (#{$min-max}-width: #{map-get( $grid_breakpoints, $breakpoint_1)}) {
			@content;
		}

	}

	@else if map-has-key($grid_breakpoints, $breakpoint_1) and $min-max=='min-max' {

		@media only screen and (min-width: #{map-get( $grid_breakpoints, $breakpoint_1)}) and (max-width: #{map-get( $grid_breakpoints, $breakpoint_2)}) {
			@content;
		}

	}

	@else if $min-max=='min-max' {

		@media only screen and (min-width: $breakpoint_1) and (max-width: $breakpoint_2) {
			@content;
		}

	}

	@else {

		@media only screen and (#{$min-max}-width: $breakpoint_1) {
			@content;
		}

	}

}

@mixin font-face($name, $file, $weight: 400, $style: normal) {
	@font-face {
		font-family: "#{$name}";
		src: local("#{$file}"),
		url('../fonts/#{$file}.woff2') format('woff2'),
		url('../fonts/#{$file}.woff') format('woff');
		font-weight: $weight;
		font-style: $style;
		font-display: swap;
	}
}

@mixin bg ($size:"contain", $position: "center") {
	background-size: #{$size};
	background-position: #{$position};
	background-repeat: no-repeat;
}

@mixin btn_anim($scaleMax:1.05, $scaleMin:0.95) {
	transform-origin: center center;
	transition: all ease-out 240ms;

	&:hover {
		transform: scale(#{$scaleMax});
	}

	&:focus {
		outline: transparent;
	}

	&:focus-visible {
		transform: scale(#{$scaleMax}) translateY(-5%);
	}

	&:active {
		transform: scale(#{$scaleMin});
	}
}

@mixin no-btn ($display:"inline-block") {
	padding: 0;
	margin: 0;
	border: 0;
	background-color: transparent;
	border-radius: 0;
	cursor: pointer;
	appearance: none;
	display: #{$display};
}

@mixin transit ($tr:0.24) {
	transition: all #{$tr}s;
}

@mixin container($max-width:"120rem", $padding:"2rem") {
	width: 100%;
	max-width: #{$max-width};
	padding: 0 #{$padding};
	margin: 0 auto;
}